// server.js
const path = require("path");
const https = require("https");
const http = require("http");
const fs = require("fs");

const fastify = require("fastify")({ logger: true });
const fastifyStatic = require("@fastify/static");
const fastifyCors = require("@fastify/cors");

const TurndownService = require("turndown");
const cheerio = require("cheerio");
const turndown = new TurndownService();

/* ────────  PLUGINS  ──────── */

fastify.register(fastifyCors, { origin: true });

fastify.register(fastifyStatic, {
  root: path.join(__dirname, "public"),
  prefix: "/",
});

/* ────────  ROUTES  ──────── */

fastify.get("/", (request, reply) => {
  const indexPath = path.join(__dirname, "src/pages/index.html");
  fs.readFile(indexPath, "utf8", (err, data) => {
    if (err) {
      request.log.error(err);
      return reply
        .code(500)
        .type("text/plain")
        .send("Failed to load index.html");
    }
    reply.type("text/html").send(data);
  });
});

fastify.get("/fetch-html", (request, reply) => {
  const targetUrl = request.query.url;
  if (!targetUrl) {
    return reply.code(400).type("text/plain").send("Missing ?url");
  }

  const client = targetUrl.startsWith("https") ? https : http;

  client
    .get(targetUrl, { headers: { "User-Agent": "Mozilla/5.0" } }, (res) => {
      const chunks = [];
      res.on("data", (chunk) => chunks.push(chunk));
      res.on("end", () => {
        const htmlString = Buffer.concat(chunks).toString("utf8");

        const $ = cheerio.load(htmlString);
        $(
          "script, style, link, meta, noscript, iframe, svg, nav, aside"
        ).remove();
        const bodyHtml = $("body").html() || htmlString;

        const markdown = turndown.turndown(bodyHtml);
        reply.type("text/plain").send(markdown);
      });
    })
    .on("error", (err) => {
      reply
        .code(500)
        .type("text/plain")
        .send("Error fetching URL: " + err.message);
    });
});

/* ────────  START  ──────── */

const PORT = process.env.PORT || 3000;
fastify.listen(PORT, "0.0.0.0", (err) => {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
  fastify.log.info(`Server running at http://0.0.0.0:${PORT}/`);
});
